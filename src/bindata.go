// Code generated by go-bindata.
// sources:
// static/download.html
// static/email.html
// static/index.html
// static/kiwipedia.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticDownloadHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x6d\x53\xdb\x46\x10\xfe\xee\x5f\xb1\xb9\xe9\xc4\x76\xab\x17\x1b\x68\x43\x6d\xc9\x2d\x10\x08\x29\x6d\x92\x01\x43\x9b\x61\x98\xcc\x59\x5a\x4b\x17\x9f\xee\x94\xbb\x13\x8a\x31\xfe\xef\x9d\x93\x6c\x23\x0a\x64\xd2\x4c\x3e\x80\xbc\x7b\xbb\xfb\xec\xcb\x73\x5a\x05\xcf\x5e\xbe\x3d\x18\xbf\x7f\x77\x08\xa9\xc9\xf8\xa8\x15\xd8\x07\x70\x2a\x92\x90\xa0\x20\x56\x81\x34\x1e\xb5\x00\x00\x82\x0c\x0d\x85\x28\xa5\x4a\xa3\x09\x49\x61\xa6\xee\x2e\x01\x7f\x75\xf8\xcc\x75\x17\x0b\xf0\x2e\x50\x69\x26\x05\x2c\x97\xae\xdb\x74\x4b\x8d\xc9\x5d\xfc\x54\xb0\xeb\x90\xfc\xe3\x9e\xef\xb9\x07\x32\xcb\xa9\x61\x13\x8e\x04\x22\x29\x0c\x0a\x13\x92\xd7\x87\x21\xc6\x09\x3a\x51\xaa\x64\x86\x61\xff\x2e\x7c\x15\x44\xd0\x0c\x43\x12\xa3\x8e\x14\xcb\x0d\x93\xa2\xe1\xfa\x52\x96\x82\x4b\x1a\xc3\x62\xe1\x1d\x31\x8e\xd6\x76\xb9\x84\xce\x62\xe1\x1d\x17\x19\x15\x67\xec\x06\x97\xcb\xae\x07\x67\x29\x55\x08\x53\xc6\x51\xc3\x54\xc9\x0c\x4c\x8a\x30\x46\x95\x31\x41\x39\x5c\x33\x0a\x14\x0a\xc1\x3e\x15\x08\x85\xe2\x20\x15\xa0\x9b\x51\xc6\x3d\x38\xa2\xda\x38\xa0\x31\x2a\x14\x02\x15\x31\x20\xd5\x73\xef\xd1\x1c\x67\x38\x2f\xa5\x8a\x75\x23\xc1\xa9\x42\x04\x6d\xa4\xa2\x09\x3a\x10\x71\x59\xc4\x77\xa2\x4d\x07\x74\x4a\x15\x13\x89\x03\x66\x95\x8d\x03\x51\xa1\xb8\x03\x13\xaa\x53\x07\x74\x8a\x9c\xaf\xf1\xc9\x43\x4c\x25\x27\xd2\x34\x11\x99\x88\xf1\xb3\x03\x53\xc9\xb9\x2c\xab\x34\x37\xa3\x82\x31\x33\x1c\x61\x33\x23\x63\xc5\xd1\x57\xf6\x10\x5c\xc8\x0b\x9d\x7a\x33\x56\xb2\xc0\xaf\x5d\x1b\xa1\x8f\x68\x84\x13\x29\x67\x20\x73\x14\x90\x28\x9a\xa7\x70\x9f\x0c\xb9\x92\x39\x2a\x33\x0f\x89\x4c\x06\x9a\x19\xfc\x60\x91\x1a\x99\xbf\x2b\x74\x0a\x27\xac\x64\xe4\x49\x37\x33\xcf\x9b\x1e\x5f\x30\xb4\xf9\xfd\x7f\xa2\x34\x8b\x7c\x3a\xf8\xe3\x5c\xfc\xee\x14\x6b\xb6\xf7\xe0\xec\x0c\x9e\xc3\x91\x14\x46\xdf\xb5\x95\x33\x31\x83\x54\xe1\x34\x24\xf6\xa6\xe9\x81\xef\x67\xf4\x73\x14\x0b\x6f\x22\xa5\xd1\x46\xd1\xdc\x0a\x91\xcc\xfc\x8d\xc2\xdf\xf6\xb6\xbd\x17\x7e\xa4\xf5\x9d\xce\xcb\x98\xf0\x22\xad\x09\x28\xe4\x21\xd1\x66\xce\x51\xa7\x88\x86\x00\x13\x06\x13\xc5\x6c\xe1\x3a\xa5\xdb\xbb\x3b\xee\xfe\xc5\x7b\xc6\xce\x5e\x1f\xe1\x49\x3f\x7e\x95\xfd\x71\xba\x37\x9b\x47\xc5\xf1\xde\xf1\x69\xb2\xbd\xf5\x36\x3b\x8f\xca\xf2\x85\x14\xdb\xa7\xef\xe3\x64\xe7\x82\xfe\xf4\x2e\x3b\x1b\xeb\x1b\xff\xe4\x97\xdd\xeb\x49\x7c\xf8\x31\xdd\x29\x08\x44\x4a\x6a\x2d\x15\x4b\x98\x08\x09\x15\x52\xcc\x33\x59\x68\xf2\xb0\x28\xdf\x9f\xda\x82\xbd\x44\xca\x84\x23\xcd\x99\xae\x6a\x89\xb4\xfe\x6d\x4a\x33\xc6\xe7\xe1\x29\xe5\x58\xd2\xf9\x60\xa7\xd7\x73\xb6\x7b\xbd\x47\x0a\xb0\x8c\x09\x89\xc1\xcf\xc6\xfa\x3d\x0a\x62\x52\x2c\x71\x92\x49\x31\xd3\x5e\xc2\x4c\x5a\x4c\x3c\x26\x7d\xaa\x35\x1a\xed\x6f\xe8\x50\xb5\xcc\xfe\x78\xa2\x53\x8f\x03\x3d\x73\xdd\xff\x8e\x69\xe0\xfb\x5c\x46\x94\xa7\x52\x9b\xc1\x6e\x6f\xb7\xf7\xed\x18\x96\x09\x35\x4e\x4d\xc8\x1a\x14\xa0\x33\x2d\x44\x64\xe9\xd9\x61\x8e\x76\xa4\x93\x38\xca\xa1\x4e\xd6\x5d\xb0\xcb\xf6\xab\xaa\x99\x7b\x82\xf2\xb9\x61\x91\x7e\x3b\xf9\x88\x91\x69\x5f\x85\x6a\xc8\x2e\xd5\x55\x68\xff\xdd\xde\x6e\xfc\xbb\x8b\x75\x48\x7b\xe0\x7d\x0a\xeb\xc7\xed\xed\xe5\x55\xd7\xb3\x79\x77\xa8\x4a\x8a\x0c\x85\xd1\xdd\xa5\x53\x1d\xf2\xb0\xff\xa3\xc0\x12\x5e\x52\x83\x9d\xee\x90\x86\xda\x8b\x14\x52\x83\x87\x1c\xad\x61\x47\x76\x9d\x55\xd0\x2c\xd4\x5e\x82\x66\x75\xa0\xf7\xe7\x63\x9a\xbc\xa1\x19\x76\x64\xf7\xb2\x77\x35\xa4\x1e\xd5\x73\x11\x85\xfd\x21\xf5\xb4\x8a\xc2\x64\x98\x79\x39\x55\x28\xcc\x1b\x19\xa3\xc7\x84\x46\x65\xf6\x71\x2a\x15\x76\x6c\x79\xab\xa8\xcb\x6e\xa7\x64\x22\x96\xa5\x13\xcb\xa8\xca\xcd\x69\xd7\xfd\x69\x3b\xed\xf5\x45\x29\xcb\x72\xc5\x2b\x97\xae\x7b\x51\xb1\xeb\x4e\xfa\xa8\xdb\x4e\x3b\xa1\xed\xee\xb0\xb5\x8a\x9c\xd0\x4e\xbb\xae\xa5\xed\x40\xfb\x7c\xcf\xdd\xda\xe9\xfd\xba\xb3\xdb\x7f\xe1\xfe\x6c\x15\xb4\x30\xd2\x5a\xdf\x19\x6b\x14\xb1\x3d\xc9\x69\x82\xd7\x0c\xcb\xf5\x69\xe0\xaf\x07\x16\xf8\xf5\xae\x0d\x26\x32\x9e\xaf\x48\x13\xb3\x6b\x88\x38\xd5\x3a\x24\xf6\xed\x42\x99\x40\xe5\x4e\x79\xc1\x62\xb2\x9e\x30\x40\x50\xf0\xb5\x51\x5e\x70\xee\x2a\x96\xa4\x06\x04\xbd\xb6\x7f\x6e\xce\x38\xd7\x0d\xeb\x15\xeb\x47\x01\x5d\xd3\xde\xd2\x2c\xc7\x98\x51\xcf\x6e\x7f\x32\x3a\x59\xcb\x81\x4f\x47\x81\xcf\xd9\x17\x9c\xd7\x4d\x5c\xdd\x16\xdb\x36\x5e\xcc\x98\xe8\xf5\xfb\x35\x9b\x7d\xa6\x75\x81\xda\x17\x58\x92\xd1\x29\xe6\x52\x19\xa8\x55\xdf\x25\x3a\x19\x1d\x49\x35\x03\x29\xe0\x15\x33\xc7\xc5\xe4\x61\xd0\xc0\x2f\x78\x43\x4a\xfb\xf7\x7a\xc5\x71\x6a\x48\xa3\x17\x64\xd4\x58\x6d\x36\x54\xda\x5f\x8d\xc2\x8f\xd9\xf5\xfa\x8e\x7d\xdd\x58\xd2\x2d\xa8\xae\x6c\x48\x32\xaa\x12\x26\x5c\x23\xf3\x41\x6f\x48\x36\x7b\x36\xf0\xd3\xad\x86\x7d\xae\x70\x14\x44\x32\xc6\x91\x5d\x1d\x83\xfb\x0b\xaa\xd5\xb2\x57\xbe\x52\x1e\xd4\x7b\x66\x3c\xcf\x2b\xbd\x66\x37\xb5\xbe\xb1\xbe\x5a\xad\x4d\x49\x8b\x85\x77\xae\xf8\x72\x49\x46\xf1\x06\xd6\x16\x56\x01\x05\xbe\x05\x6d\x7d\x7b\x85\xa3\xd7\x42\x1b\xca\xab\x25\x56\xe4\x31\x35\xf8\x64\x51\x3f\x54\x5f\x33\xe0\xea\x3f\x61\x33\x57\x29\xbd\x84\xfb\xd3\x9d\xf1\xf9\x9b\x1c\x6e\x41\x17\xb1\x04\xf7\xb0\xfa\xe0\x01\xf7\x7e\x8e\x0f\x52\x9c\x4a\x69\x50\x7d\x45\x96\x8d\x5a\x1a\x33\xbf\xc7\xba\x03\x45\xa7\x06\x63\x60\x02\xf6\x91\x27\xac\xc8\xe0\x39\xcd\xf2\x21\x5c\xa0\xc0\x9b\x02\x39\x85\xc9\x1c\xee\xf1\xd2\xbe\x39\xd6\xbb\x82\x49\x32\xfa\x1b\x27\x7f\x59\xc1\x76\xd7\x6b\xb0\xaf\xca\xf8\xc9\x5c\xaa\xbb\x4a\x46\xe3\x92\x19\x83\x6a\x00\x0f\xa8\x6f\xea\x93\x8a\xfb\x6b\xbc\x0f\x16\xef\xf7\x86\x54\x4f\x74\x83\x14\xf8\x75\x6f\xec\x3b\xa5\x7e\x99\x04\x7e\xfd\x7d\xff\x6f\x00\x00\x00\xff\xff\x0b\x72\x4e\xaa\xf0\x0b\x00\x00")

func staticDownloadHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticDownloadHtml,
		"static/download.html",
	)
}

func staticDownloadHtml() (*asset, error) {
	bytes, err := staticDownloadHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/download.html", size: 3056, mode: os.FileMode(420), modTime: time.Unix(1491255298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticEmailHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xdf\x6f\xd3\x30\x10\x7e\xef\x5f\x71\x04\x4d\x02\x89\x34\x59\xa7\x49\x6b\x7e\x09\x69\x05\xf1\x36\x24\x36\x21\x9e\x26\x27\xbe\x34\xa6\x8e\x1d\xec\xeb\xd2\xae\xea\xff\x8e\x9c\x34\x5d\xbb\xb1\x21\x40\x28\x0f\xf1\xf9\x7c\x5f\xee\x3e\x7f\x77\x49\x5e\xcd\xae\x2e\xaf\xbf\x7d\xfe\x00\x15\xd5\x32\x1b\x25\xee\x05\xab\x5a\x2a\x9b\x7a\x15\x51\x13\x05\x41\xdb\xb6\xe3\xf6\x6c\xac\xcd\x3c\x38\x9d\x4e\xa7\xc1\xca\x9d\xf1\xb2\x11\x40\x52\x21\xe3\xdd\xa2\x46\x62\xe0\xce\xfb\xf8\x63\x29\xee\x52\xef\x52\x2b\x42\x45\xfe\xf5\xba\x41\x0f\x8a\xde\x4a\x3d\xc2\x15\x05\x2e\x3e\x86\xa2\x62\xc6\x22\xa5\x37\xd7\x1f\xfd\x8b\x1e\x2e\xe8\xf1\x92\x5c\xf3\x35\x58\x5a\x4b\x4c\x3d\x29\x14\xfa\x15\x8a\x79\x45\xd1\x24\x6c\x56\xb1\xdf\x62\xbe\x10\xe4\x3b\x28\xdf\x8a\x7b\xf4\x19\xff\xbe\xb4\x14\x29\xad\x30\xf6\x6b\xfb\x8c\xa7\x66\x66\x2e\x94\x4f\xba\x89\xc2\xc1\x30\x1d\x6c\x18\x8f\x76\x76\xae\x89\x74\xfd\xe0\x97\x58\x3a\x77\xa9\x55\x0f\x18\x9d\x9e\x1d\x64\xd0\x6f\xd7\x5a\x53\x25\xd4\x3c\x62\x8a\x04\x93\x82\x59\xe4\xf1\xa8\xf3\x95\xac\x16\x72\x1d\x5d\xea\xa5\x11\x68\xde\x81\x65\xca\xfa\x16\x8d\x28\xe3\x42\x4b\x6d\xa2\xd7\x93\x7c\xc2\x27\x45\xdc\x30\xce\x1d\x44\x18\xb7\x82\x53\x15\x9d\x86\xe1\xc9\x49\xdc\x91\x02\x90\x10\xcb\x25\x42\xae\x0d\x47\x93\x7a\xa1\x07\x05\x4a\x69\x1b\x56\x08\x35\xdf\xdb\x3b\x08\x67\x0f\x61\x66\x58\xf0\x81\xcc\xdf\x65\xf5\xa8\xd0\x27\xdc\x0f\x79\x9e\x37\x2b\x08\xdd\xb3\x23\x2a\x0a\xf7\xc9\xda\x86\xa9\xa3\xcf\xb5\x7d\x7c\xae\x25\x8f\xbd\x6c\xa6\x5b\x25\x35\xe3\x20\x85\x5a\xc0\x9b\xcd\x66\xfc\x69\x59\x33\xf5\x45\xdc\xe3\x76\x0b\xa4\x89\xc9\xb7\x49\xe0\x40\xb2\x24\x37\x59\xc2\xa0\x32\x58\xa6\xde\x66\x33\xbe\x31\x72\xbb\xf5\xb2\x61\x95\x04\xac\x3b\xd2\x7f\x36\x20\xbe\x5f\x99\xff\x4f\x80\x33\x20\x84\xfe\xf5\xc7\x24\x7c\x15\x52\x42\x8e\xc0\x51\x22\x21\x07\xad\x0e\x4a\xde\x6c\xc6\xb3\x7e\xff\x4a\x6d\xb7\xcf\x57\x17\x74\xb2\xc8\x46\x7f\xa7\x91\x97\x08\xf9\x25\x1f\xd3\x66\x35\x88\xf6\x02\xdd\xf3\xa8\x47\x76\xd8\x3b\xf3\x81\xaa\xa1\xc7\x0e\x76\xba\x16\xdc\xab\xd4\x35\xfb\xf3\x17\x76\x14\xd3\xac\x86\xa8\x41\x16\x6e\xe4\xd8\x28\x08\x9a\xa5\xad\xc6\x0b\xd1\x8a\x7d\x61\xc7\xb9\x76\x23\x81\x63\xa1\x0d\x23\xa1\x55\x37\x11\x3c\x20\x66\xe6\x48\xa9\x77\x9b\x4b\xa6\x16\x5e\x36\x43\x29\xee\xd0\x20\x87\x52\x1b\x28\x0d\x22\xe4\x6b\xd8\x63\x83\x0f\xb6\x62\x06\xa1\x14\x12\x2d\x94\x46\xd7\x40\x15\x02\xa1\xa9\x85\x62\xd2\x29\xf2\xe9\xfd\x1f\x11\x73\xee\x4a\x00\xff\x69\x01\xd4\x0a\x22\x34\xe3\x42\xd7\x41\x8b\x79\xad\xd5\xc2\xde\x0a\xfd\x4f\xe5\xb8\xa9\xcb\x0a\x82\xf7\x07\x80\x5d\xd7\xf4\x62\x7b\x49\x5a\x07\x97\x32\xe8\x2c\x09\xfa\xcd\x24\xe8\x7f\x15\x3f\x03\x00\x00\xff\xff\xf6\x87\xe6\xa7\x3b\x06\x00\x00")

func staticEmailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticEmailHtml,
		"static/email.html",
	)
}

func staticEmailHtml() (*asset, error) {
	bytes, err := staticEmailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/email.html", size: 1595, mode: os.FileMode(420), modTime: time.Unix(1491255298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x7b\x53\xdb\xca\x15\xff\x9f\x4f\x71\xa2\x9b\xb9\xb6\x5b\x3d\x6c\xe0\x36\xd4\x48\x6e\x08\x97\x3c\x9a\x36\x61\x78\xa4\xcd\x30\x4c\x66\x2d\x1d\x49\x6b\xaf\x76\x95\x3d\x2b\x84\x03\x7c\xf7\xce\xca\x96\x2d\x02\xa1\x99\x3b\x9d\x32\x03\x66\x1f\xe7\xf5\x3b\x8f\xdf\x3a\x7c\xf6\xfb\xc7\xc3\xb3\xcf\xc7\x47\x90\x9b\x42\x4c\xb6\x42\xfb\x01\x82\xc9\x2c\x72\x50\x3a\x76\x03\x59\x32\xd9\x02\x00\x08\x0b\x34\x0c\xe2\x9c\x69\x42\x13\x39\x95\x49\xbd\x3d\x07\x82\xd5\xe1\x33\xcf\xbb\xb9\x01\xff\x13\x6a\xe2\x4a\xc2\xdd\x9d\xe7\x75\xc5\x72\x63\x4a\x0f\xbf\x56\xfc\x2a\x72\xfe\xed\x9d\x1f\x78\x87\xaa\x28\x99\xe1\x53\x81\x0e\xc4\x4a\x1a\x94\x26\x72\xde\x1d\x45\x98\x64\xe8\xc6\xb9\x56\x05\x46\xa3\x8d\xfa\x46\x89\x64\x05\x46\xce\x15\xc7\xba\x54\xda\x74\xe4\x6a\x9e\x98\x3c\x4a\xf0\x8a\xc7\xe8\x35\x0b\x17\xb8\xe4\x86\x33\xe1\x51\xcc\x84\x55\xf5\x50\x51\x82\x14\x6b\x5e\x1a\xae\x64\x47\xd7\x69\xce\x34\x42\xca\x05\x12\xa4\x5a\x15\x60\x72\x84\x33\xd4\x05\x97\x4c\xc0\x15\x67\xc0\xa0\x92\xfc\x6b\x85\x50\x69\x01\x4a\x03\x7a\x05\xe3\xc2\x87\xd7\x8c\x8c\x0b\x84\x71\xa5\x11\x98\x4c\x00\x19\x2d\x7c\x78\x34\x88\x39\x2e\x6a\xa5\x13\xea\x18\x4e\x35\x22\x90\x51\x9a\x65\xe8\x42\x2c\x54\x95\x6c\x96\xd6\x1f\xa0\x9c\x69\x2e\x33\x17\xcc\xca\x1d\x17\xe2\x4a\x0b\x17\xa6\x8c\x72\x17\x28\x47\x21\x5a\x07\x1e\x89\x57\xab\xa9\x32\x5d\x8b\x5c\x26\x78\xed\x42\xaa\x84\x50\x75\xe3\xe6\x3a\x97\x70\xc6\x8d\x40\x58\x27\xd1\xd8\xe5\xe4\x69\x6c\x3c\x28\x2b\xca\xfd\x39\xaf\x79\x18\x2c\x05\x3a\x0a\x5f\xb3\x18\xa7\x4a\xcd\x41\x95\x28\x21\xd3\xac\xcc\xe1\x7e\x8d\x94\x5a\x95\xa8\xcd\x22\x72\x54\x36\x26\x6e\xf0\x8b\xf5\xbb\xe3\xef\x71\x45\x39\xbc\xe7\x35\x77\x7e\x28\x66\x16\x65\x57\xe2\x89\x8b\xd6\xbf\x9f\x4e\x7b\x27\xb4\x1f\xab\xfc\x7f\xd5\x53\x17\xd5\xc3\xd3\x53\xf8\x15\x5e\x2b\x69\x68\x83\xa6\xe0\x72\x0e\xb9\xc6\x34\x72\x6c\xdf\xd1\x38\x08\x0a\x76\x1d\x27\xd2\x9f\x2a\x65\xc8\x68\x56\xda\x45\xac\x8a\x60\xbd\x11\xec\xf8\x3b\xfe\x8b\x20\x26\xda\xec\xf9\x05\x97\x7e\x4c\xe4\x80\x46\x11\x39\x64\x16\x02\x29\x47\x34\x0e\x70\x69\x30\xd3\xdc\x46\x4e\x39\xdb\xd9\xdb\xf5\x5e\x7d\xfa\xcc\xf9\xe9\xbb\xd7\xf8\x7e\x94\xbc\x29\xfe\x7e\x72\x30\x5f\xc4\xd5\xdb\x83\xb7\x27\xd9\xce\xf6\xc7\xe2\x3c\xae\xeb\x17\x4a\xee\x9c\x7c\x4e\xb2\xdd\x4f\xec\xcf\xc7\xc5\xe9\x19\x7d\x0b\xde\xff\x65\xef\x6a\x9a\x1c\xcd\xf2\xdd\xca\x81\x58\x2b\x22\xa5\x79\xc6\x65\xe4\x30\xa9\xe4\xa2\x50\x15\x39\x0f\x83\x0a\x82\xd4\x06\xec\x67\x4a\x65\x02\x59\xc9\xa9\x89\x25\x26\xfa\x5b\xca\x0a\x2e\x16\xd1\x09\x13\x58\xb3\xc5\x78\x77\x38\x74\x77\x86\xc3\x47\x02\xb0\x85\x12\x39\x06\xaf\x8d\x95\x7b\xd4\x88\xc9\xb1\xc6\x69\xa1\xe4\x9c\xfc\x8c\x9b\xbc\x9a\xfa\x5c\x05\x8c\x08\x0d\x05\xeb\x7a\x68\x20\xb3\xff\xfc\x00\xa9\xc7\x0d\x3d\xf3\xbc\xef\xd3\x34\x0e\x02\xa1\x62\x26\x72\x45\x66\xbc\x37\xdc\x1b\xfe\x71\x1b\xb6\x12\x96\x76\x96\x15\xb9\x34\x0a\xd0\x4f\x2b\x19\xdb\xfa\xec\x73\x97\x5c\xe5\x66\xae\x76\x99\x5b\x0c\x6e\xf8\x45\xef\x4d\x03\xe6\x81\x64\x62\x61\x78\x4c\x1f\xa7\x33\x8c\x4d\xef\x32\xd2\xfb\xfc\x42\x5f\x46\xf6\xcf\xed\xed\x5a\x7e\x70\xd3\xaa\xb4\x07\xfe\xd7\x68\xf9\x71\x7b\x7b\x71\x39\xf0\xad\xdf\x7d\xa6\xb3\xaa\x40\x69\x68\x70\xe7\x36\x87\x22\x1a\xfd\x49\x62\x0d\xbf\x33\x83\xfd\xc1\x3e\x8b\xc8\x8f\x35\x32\x83\x47\x02\xed\xc5\xbe\x1a\xb8\x2b\xa5\x45\x44\x7e\x86\x66\x75\x40\xaf\x16\x67\x2c\xfb\xc0\x0a\xec\xab\xc1\xc5\xf0\x72\x9f\xf9\x8c\x16\x32\x8e\x46\xfb\xcc\x27\x1d\x47\xd9\x7e\xe1\x97\x4c\xa3\x34\x1f\x54\x82\x3e\x97\x84\xda\xbc\xc2\x54\x69\xec\xdb\xf0\x56\x5a\xef\x06\xfd\x9a\xcb\x44\xd5\x6e\xa2\xe2\xc6\x37\xb7\xb7\xc4\xa7\xe7\xf6\xda\x46\xa9\xeb\x7a\x55\x57\x1e\x6b\xb1\x68\xaa\x6b\xb3\x9a\x51\xcf\xed\x65\xac\x37\xd8\xdf\x5a\x69\xce\x58\xbf\xb7\x8c\xa5\xe7\x42\xef\xfc\xc0\xdb\xde\x1d\xfe\x75\x77\x6f\xf4\xc2\xfb\xcd\x6e\xb0\xca\x28\x7b\x7b\x73\x99\x50\x26\xf6\xa4\x64\x19\x5a\x3e\x6b\x4f\xc3\xa0\x4d\x58\x18\x2c\x99\x37\x9c\xaa\x64\xb1\x2a\x9a\x84\x5f\x41\x2c\x18\x51\xe4\xd8\xf1\xc2\xb8\x44\xed\xa5\xa2\xe2\x89\xd3\x66\x18\x20\xac\x44\x7b\xa9\xac\x84\xf0\x34\xcf\x72\x03\x92\x5d\xd9\x5f\xaf\xe4\x42\x50\xe7\xf6\xaa\xea\x27\x21\x6b\xcb\xde\x96\x59\x89\x09\x67\xbe\x7d\x0b\x38\x93\xf7\xed\x3a\x0c\xd8\x24\x0c\x04\x7f\x42\xb8\x05\x71\xd5\x2d\x16\x36\x51\xcd\xb9\x1c\x8e\x46\xcb\x6a\x0e\x38\x51\x85\x14\x48\xac\x9d\xc9\x09\x5a\x1a\x87\xe5\xd6\xff\x44\xbb\x33\x79\xad\xf4\x1c\x94\x84\x37\xdc\xbc\xad\xa6\x0f\x95\x86\x41\x25\x3a\xab\x7c\x74\x0f\x2b\x81\xa9\x71\x3a\x58\x38\x93\x0e\xa3\x59\x55\xf9\x68\x95\x8a\x20\xe1\x57\x6d\x8f\xfd\x5c\x5a\xca\xc7\xd9\xb3\xa5\x72\x3f\x0c\xca\xee\x6d\x8d\x93\x30\x56\x09\x4e\x7e\x81\xa5\x1c\x6b\x24\xb7\x9e\x37\x4c\x04\x24\x58\x3c\xf7\x93\x22\xdb\x6a\x51\xd9\x0c\x8b\xb7\x3a\x3d\x4f\x4f\x0f\xbe\xcd\x82\xcd\xad\xad\x5f\xe0\xc8\xb2\xca\x77\x6a\x3c\x0f\x9b\xdd\x19\xa6\xa9\xc6\xc5\x4b\x81\x53\x55\xd3\x9c\xfb\x4a\x67\x4f\xda\xa8\x3f\xbf\x1f\xe5\x1f\x66\x87\xfa\xbe\x8d\x95\xab\x32\xb1\xcc\x68\x30\x36\x50\x73\x93\x03\x83\xe3\x37\xc7\x50\x32\x22\xfb\xe8\xd9\x18\xb7\x3b\x65\xae\x19\x21\x24\x55\x82\x4f\x5a\xac\xa6\xd3\xb3\xf8\xc5\x6e\x25\x36\x16\xfd\xac\xcc\xb6\xc2\xa0\x81\x29\x0c\x2c\x64\xf7\x00\x84\x66\x44\x46\x4e\xc1\x74\xc6\xa5\x67\x54\x39\xf6\x46\xdb\xe5\xf5\xbe\x33\x79\x0e\x0d\xb8\x6d\xda\x70\x39\x68\x9c\xc9\x43\x65\x7f\x20\xd3\xf9\xf6\xe4\x9d\x24\xc3\x44\xc3\xe6\x55\x99\x30\x83\x61\x90\x6f\x77\xae\x58\xea\x3e\x27\x2e\x33\xc8\x94\xf2\x33\xd1\x50\x3f\xe5\x4a\x1b\x94\xa8\xd7\x4c\xfe\x5d\x29\x3c\x6f\x9e\x7b\xe0\xd1\x3f\x60\xdd\x0b\x8d\x78\x90\xee\x9e\x9d\x7f\x28\xe1\x16\xa8\x4a\x14\x78\x47\xcd\x8b\x10\xbc\xff\x12\x4e\xaa\x94\x41\xfd\x13\x11\x75\xe2\xee\xf4\xc9\xbd\x4e\x3d\xd4\x2c\x35\x98\x00\x97\xf0\x0a\x45\xc6\xab\x02\x7e\x65\x45\xb9\x0f\x9f\x50\xe2\xb7\x0a\x05\x83\xe9\x02\xee\xf5\xb2\x9d\xb6\x2d\xbf\x72\xe5\x4c\xfe\x85\xd3\x7f\xda\x85\x6d\x35\xbf\xd3\xb1\x8d\xc7\x3f\xf4\xa5\x99\x6f\xce\xe4\xac\xe6\xc6\xa0\x1e\xc3\x83\x71\x61\x96\x27\xcd\xbc\x68\xed\x7d\xb1\xf6\x5e\x76\x56\xcb\xf6\x5e\x5b\x0a\x83\x25\x36\xf7\x69\x14\x2c\xd9\xac\xf5\xb2\x19\xbb\xfe\xfe\x09\x62\xf7\x02\xc1\xa7\x14\xcc\xbe\x56\xa8\x17\xc1\x8e\x3f\xf2\x87\xab\x45\xf3\x9c\x9a\x91\xad\xb2\x2e\x2d\x3f\xaa\xfc\x27\xdf\x1e\x33\x0a\x2c\xf7\x27\x4f\xab\x6e\xd1\x7b\xde\x7f\xc8\xdf\xcb\x7d\xc7\x6f\x5b\x60\xe0\x37\x0a\xfb\x37\xf7\xb2\x6b\x7f\xc8\xd8\x2f\x1f\x34\x86\x0b\xe7\x61\xfb\x1a\x55\x12\xc6\x1a\x0d\x90\x54\x75\x82\xd2\x2f\x93\xd4\x71\xc1\xb9\x37\x66\x30\x49\x38\xbe\x2c\x91\x69\x31\x63\x85\x45\x0c\xc4\x42\xf3\x98\xbe\x34\x83\xdc\x2f\x12\xe7\xd2\x7d\x60\xd8\x3a\x74\x5a\x22\x26\x63\xd8\xfe\xed\xe1\x31\xe5\xaa\x3e\xac\x34\x29\x3d\x86\x94\x09\xc2\xee\x95\xbb\x35\xed\xde\x3d\x42\xb1\x4b\x6e\x0d\x83\xe5\x97\xdf\xff\x04\x00\x00\xff\xff\x3a\x38\xcb\x91\x0d\x0f\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3853, mode: os.FileMode(420), modTime: time.Unix(1491255298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticKiwipediaHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x6d\x73\xdb\xb8\x11\xfe\xee\x5f\xb1\xc1\x74\x4e\x52\xcb\x17\xc9\x76\x1b\x57\x26\xd5\x73\x7c\x76\x7c\xcd\x34\xc9\xd8\x4e\xda\x4c\x26\x73\xb3\x22\x97\x24\x2c\x10\x60\x00\xd0\xb4\xf2\xf2\xdf\x3b\x20\x45\x89\xae\x9d\xf4\xa6\xcd\x07\x5b\x06\xf6\xfd\xd9\x67\xb1\x56\xf4\xe4\x97\x57\xa7\xd7\xef\x5e\x9f\x41\x61\x4b\xb1\xd8\x8b\xdc\x07\x08\x94\x79\xcc\x48\x32\x77\x41\x98\x2e\xf6\x00\x00\xa2\x92\x2c\x42\x52\xa0\x36\x64\x63\x56\xdb\xcc\x3f\x62\x10\x6e\x84\x4f\x7c\xff\xf3\x67\x08\xde\x92\x36\x5c\x49\xf8\xfa\xd5\xf7\x87\x66\x85\xb5\x95\x4f\x1f\x6b\x7e\x1b\xb3\x7f\xf9\x6f\x4e\xfc\x53\x55\x56\x68\xf9\x52\x10\x83\x44\x49\x4b\xd2\xc6\xec\xd7\xb3\x98\xd2\x9c\xbc\xa4\xd0\xaa\xa4\x78\xb6\x73\xdf\x3a\x91\x58\x52\xcc\x52\x32\x89\xe6\x95\xe5\x4a\x0e\x4c\x5f\xf0\x86\x57\x94\x72\x0c\xe0\xaa\x40\x4d\x90\x71\x41\x06\x32\xad\x4a\xb0\x05\xc1\x35\xe9\x92\x4b\x14\x70\xcb\x11\x10\x6a\xc9\x3f\xd6\x04\xb5\x16\xa0\x34\x90\x5f\x22\x17\x01\x9c\xa3\xb1\x1e\x18\x4a\x6a\x4d\x80\x32\x05\x42\xb3\x0e\x1e\xcd\x62\x45\xeb\x46\xe9\xd4\x0c\x52\xc8\x34\x11\x18\xab\x34\xe6\xe4\x41\x22\x54\x9d\xee\x8e\x2e\x1d\x30\x05\x6a\x2e\x73\x0f\xec\x26\x1b\x0f\x92\x5a\x0b\x0f\x96\x68\x0a\x0f\x4c\x41\x42\xf4\xf1\xd9\xc3\x98\x5a\x2d\x95\x1d\x46\xe4\x32\xa5\x3b\x0f\x32\x25\x84\x6a\xda\x34\xb7\xcd\x80\x6b\x6e\x05\xc1\xb6\x0b\xd6\x1d\x17\x5b\x94\xc0\x87\xaa\x36\x45\xb0\xe2\x0d\x8f\xc2\x4e\x38\x30\x3e\xc7\x84\x96\x4a\xad\x40\x55\x24\x21\xd7\x58\x15\x70\xbf\xa1\x95\x56\x15\x69\xbb\x8e\x99\xca\xe7\x86\x5b\xfa\xcd\xe5\x38\xc8\xed\x75\x6d\x0a\x70\xf1\xd8\x37\xcd\xec\xba\x1a\x5a\x7c\x47\xd1\xe5\xf7\x58\xb3\x87\x65\x7c\xdb\xfc\x71\xc6\xfc\x70\x9a\x0c\x01\x3c\xbd\xba\x82\x9f\xe0\x5c\x49\x6b\x76\xc0\x09\x2e\x57\x50\x68\xca\x62\xe6\xe6\xc1\xcc\xc3\xb0\xc4\xbb\x24\x95\xc1\x52\x29\x6b\xac\xc6\xca\x1d\x12\x55\x86\xdb\x8b\xf0\x20\x38\x08\x9e\x86\x89\x31\xbb\xbb\xa0\xe4\x32\x48\x8c\x61\xa0\x49\xc4\xcc\xd8\xb5\x20\x53\x10\x59\x06\x5c\x5a\xca\x35\x77\x85\x9b\x02\x0f\x8e\x0e\xfd\x67\x6f\xdf\x71\x7e\xf5\xeb\x39\xbd\x98\xa5\xcf\xcb\xbf\x5f\x9e\xac\xd6\x49\x7d\x71\x72\x71\x99\x1f\xec\xbf\x2a\xdf\x24\x4d\xf3\x54\xc9\x83\xcb\x77\x69\x7e\xf8\x16\xff\xf4\xba\xbc\xba\x36\x9f\xc2\x17\x7f\x39\xba\x5d\xa6\x67\x37\xc5\x61\xcd\x20\xd1\xca\x18\xa5\x79\xce\x65\xcc\x50\x2a\xb9\x2e\x55\x6d\xd8\xc3\xa2\xc2\x30\x73\x05\x07\xb9\x52\xb9\x20\xac\xb8\x69\x6b\x49\x8c\xf9\x5b\x86\x25\x17\xeb\xf8\x12\x05\x35\xb8\x9e\x1f\x4e\xa7\xde\xc1\x74\xfa\x48\x01\x8e\x13\x31\xb3\x74\x67\x9d\xdd\xa3\x41\x6c\x41\x0d\x2d\x4b\x25\x57\x26\xc8\xb9\x2d\xea\x65\xc0\x55\x88\xc6\x90\x35\xe1\x96\x0e\x2d\x64\xee\x8f\x6f\x20\xf5\x78\xa0\x27\xbe\xff\x9f\x6d\x9a\x87\xa1\x50\x09\x8a\x42\x19\x3b\x3f\x9a\x1e\x4d\xff\xf7\x18\x8e\x09\x5d\x9c\x8e\x90\x5d\x50\x80\x71\x56\xcb\xc4\xd1\x73\xcc\x3d\xe3\x29\x2f\xf7\xb4\x87\x5e\x39\xf9\xcc\xdf\x8f\x9e\xb7\x60\x9e\x48\x14\x6b\xcb\x13\xf3\x6a\x79\x43\x89\x1d\x7d\x88\xf5\x31\x7f\xaf\x3f\xc4\xee\xd7\x97\x2f\x5b\xfb\xc9\xe7\xde\xa5\x13\x04\x1f\xe3\xee\xe3\xcb\x97\xf7\x1f\x26\x81\xcb\x7b\x8c\x3a\xaf\x4b\x92\xd6\x4c\xbe\x7a\xad\x50\xc4\xb3\x3f\x4a\x6a\xe0\x17\xb4\x34\x9e\x1c\x63\x6c\x82\x44\x13\x5a\x3a\x13\xe4\x14\xc7\x6a\xe2\x6d\x9c\x96\xb1\x09\x72\xb2\x1b\x81\x79\xb6\xbe\xc6\xfc\x25\x96\x34\x56\x93\xf7\xd3\x0f\xc7\x18\xa0\x59\xcb\x24\x9e\x1d\x63\x60\x74\x12\xe7\xc7\x65\x50\xa1\x26\x69\x5f\xaa\x94\x02\x2e\x0d\x69\xfb\x8c\x32\xa5\x69\xec\xca\xdb\x78\xfd\x3a\x19\x37\x5c\xa6\xaa\xf1\x52\x95\xb4\xb9\x79\xa3\x0e\x9f\x91\x37\xea\x07\xa5\x69\x9a\x0d\xaf\x7c\xec\xb1\x68\xd9\xb5\x3b\xdd\x98\x91\x37\xca\x71\x34\x39\xde\xdb\x78\xce\x71\x3c\xea\x6a\x19\x79\x30\x7a\x73\xe2\xef\x1f\x4e\xff\x7a\x78\x34\x7b\xea\xff\xd9\x5d\x60\x6d\x95\xd3\xde\x29\x1b\x92\xa9\x93\x54\x98\xd3\x2d\xa7\xa6\x97\x46\x61\xdf\xb0\x28\xec\x36\x62\xb4\x54\xe9\x7a\x43\x9a\x94\xdf\x42\x22\xd0\x98\x98\xb9\xd7\x05\xb9\x24\xed\x67\xa2\xe6\x29\xeb\x3b\x0c\x10\xd5\xa2\x57\xaa\x6a\x21\x7c\xcd\xf3\xc2\x82\xc4\x5b\xf7\xe3\x57\x5c\x08\x33\xd0\xde\xb0\x7e\x11\x61\x4f\xfb\xd5\x76\xc1\xb9\x1d\xcd\x76\x4f\x79\x14\xe2\x22\x0a\x05\xff\x8e\x71\x0f\xe2\x66\x5a\x1c\x6c\xa2\x5e\x71\x39\x9d\xcd\x3a\x36\x87\xdc\x98\x9a\x4c\x28\xa9\x61\x8b\x4b\xaa\x94\xb6\xd0\x5d\xfd\x10\xef\x6c\x71\xae\xf4\x0a\x94\x84\xe7\xdc\x5e\xd4\xcb\x87\x4e\xa3\xb0\x16\x83\x53\x31\xbb\x87\x95\xa0\xcc\xb2\x01\x16\x6c\x31\x58\x5e\xce\x55\x31\xdb\xb4\x22\x4c\xf9\x6d\x3f\x63\xbf\xaf\x2d\xc5\x3e\xb4\x23\x1b\xb3\x12\x75\xce\xa5\x6f\x55\x35\x9f\x1e\x0f\x00\x06\x5c\x21\xf4\xd4\x44\x37\x66\x51\x58\xec\x2f\xf6\x76\x3e\xaa\xc5\x79\xbb\x46\x12\x94\xb0\x24\xa8\x2b\xa1\x30\xa5\x14\x1a\x6e\x8b\x76\xad\x24\xaa\x2c\xdd\xa2\x10\x5c\x12\x58\xa5\x04\xa0\x81\x86\x84\x08\xa2\xb0\xba\xef\xe9\x8a\x97\x95\xe8\x7d\xcc\x5b\xf1\x4e\xaa\x69\x11\x25\x2a\xa5\xc5\x1f\xda\x7f\x1c\xc0\xf7\x3b\x3d\x30\x02\x93\x55\x90\x96\x39\xf4\xdd\xd8\x3d\x52\x5b\xd9\xde\x43\xd9\x85\xce\xde\x64\x57\x27\x9f\x6e\x76\x5a\x51\xd8\x46\x88\x42\x17\x6d\x98\xda\x23\x38\xc1\xfe\xb4\xba\x63\x8b\x33\xb7\x17\x01\xdb\x65\xfa\x5f\x53\xbe\x00\x76\xe7\x93\xb3\x98\xc3\x0d\x65\x99\xa6\xf5\xcf\x82\x96\xaa\x31\x2b\x1e\x28\x9d\xb3\xff\xbf\xaa\xe6\xdd\x8b\x59\xf1\xf2\xe6\x54\x7f\xb7\xaa\x7b\x64\xc9\x94\xb2\xa4\x7f\x07\x5f\x06\xac\x1a\x70\xf3\xde\x74\x9c\x6a\xcc\x2c\xa5\xc0\x25\x3c\x23\x91\xf3\xba\x84\x9f\xb0\xac\x8e\xe1\x2d\x49\xfa\x54\x93\x40\x58\xae\xe1\xde\xfc\xb8\x17\xae\xdf\x69\x5c\xb1\xc5\x3f\x69\xf9\x0f\x77\x70\xf4\x0e\x06\x53\xd2\x66\xfc\xcd\x5c\xda\x37\x85\x2d\xae\x1b\x6e\x2d\xe9\x39\x3c\x18\x51\xdb\x49\xda\x19\xed\xe3\xfd\xe6\xe2\xfd\x3c\x38\x75\x23\xb5\x8d\x14\x85\x1d\x36\xee\xed\xeb\x1e\xbd\x28\xec\xbe\x2d\xfc\x3b\x00\x00\xff\xff\x16\xe3\xe3\xb0\x3e\x0c\x00\x00")

func staticKiwipediaHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticKiwipediaHtml,
		"static/kiwipedia.html",
	)
}

func staticKiwipediaHtml() (*asset, error) {
	bytes, err := staticKiwipediaHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/kiwipedia.html", size: 3134, mode: os.FileMode(420), modTime: time.Unix(1491255298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/download.html": staticDownloadHtml,
	"static/email.html": staticEmailHtml,
	"static/index.html": staticIndexHtml,
	"static/kiwipedia.html": staticKiwipediaHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"download.html": &bintree{staticDownloadHtml, map[string]*bintree{}},
		"email.html": &bintree{staticEmailHtml, map[string]*bintree{}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"kiwipedia.html": &bintree{staticKiwipediaHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

